define(["exports","./style-settings.js","./css-parse.js","./common-regex.js","./unscoped-style-handler.js"],function(_exports,_styleSettings,_cssParse,_commonRegex,_unscopedStyleHandler){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.toCssText=function(rules,callback){if(!rules){return""}if("string"===typeof rules){rules=(0,_cssParse.parse)(rules)}if(callback){forEachRule(rules,callback)}return(0,_cssParse.stringify)(rules,_styleSettings.nativeCssVariables)};_exports.rulesForStyle=function(style){if(!style.__cssRules&&style.textContent){style.__cssRules=(0,_cssParse.parse)(style.textContent)}return style.__cssRules||null};_exports.isKeyframesSelector=function(rule){return!!rule.parent&&rule.parent.type===_cssParse.types.KEYFRAMES_RULE};_exports.forEachRule=forEachRule;_exports.applyCss=function(cssText,moniker,target,contextNode){let style=createScopeStyle(cssText,moniker);applyStyle(style,target,contextNode);return style};_exports.createScopeStyle=createScopeStyle;_exports.applyStylePlaceHolder=applyStylePlaceHolder;_exports.applyStyle=applyStyle;_exports.isTargetedBuild=function(buildType){return _styleSettings.nativeShadow?"shadow"===buildType:"shady"===buildType};_exports.getCssBuildType=function(element){return element.getAttribute("css-build")};_exports.processVariableAndFallback=processVariableAndFallback;_exports.setElementClassRaw=function(element,value){if(_styleSettings.nativeShadow){element.setAttribute("class",value)}else{window.ShadyDOM.nativeMethods.setAttribute.call(element,"class",value)}};_exports.getIsExtends=function(element){let localName=element.localName,is="",typeExtension="";if(localName){if(-1<localName.indexOf("-")){is=localName}else{typeExtension=localName;is=element.getAttribute&&element.getAttribute("is")||""}}else{is=element.is;typeExtension=element.extends}return{is,typeExtension}};_exports.gatherStyleText=function(element){const styleTextParts=[],styles=element.querySelectorAll("style");for(let i=0;i<styles.length;i++){const style=styles[i];if((0,_unscopedStyleHandler.isUnscopedStyle)(style)){if(!_styleSettings.nativeShadow){(0,_unscopedStyleHandler.processUnscopedStyle)(style);style.parentNode.removeChild(style)}}else{styleTextParts.push(style.textContent);style.parentNode.removeChild(style)}}return styleTextParts.join("").trim()};function forEachRule(node,styleRuleCallback,keyframesRuleCallback,onlyActiveRules){if(!node){return}let skipRules=!1,type=node.type;if(onlyActiveRules){if(type===_cssParse.types.MEDIA_RULE){let matchMedia=node.selector.match(_commonRegex.MEDIA_MATCH);if(matchMedia){if(!window.matchMedia(matchMedia[1]).matches){skipRules=!0}}}}if(type===_cssParse.types.STYLE_RULE){styleRuleCallback(node)}else if(keyframesRuleCallback&&type===_cssParse.types.KEYFRAMES_RULE){keyframesRuleCallback(node)}else if(type===_cssParse.types.MIXIN_RULE){skipRules=!0}let r$=node.rules;if(r$&&!skipRules){for(let i=0,l=r$.length,r;i<l&&(r=r$[i]);i++){forEachRule(r,styleRuleCallback,keyframesRuleCallback,onlyActiveRules)}}}function createScopeStyle(cssText,moniker){let style=document.createElement("style");if(moniker){style.setAttribute("scope",moniker)}style.textContent=cssText;return style}let lastHeadApplyNode=null;function applyStylePlaceHolder(moniker){let placeHolder=document.createComment(" Shady DOM styles for "+moniker+" "),after=lastHeadApplyNode?lastHeadApplyNode.nextSibling:null,scope=document.head;scope.insertBefore(placeHolder,after||scope.firstChild);lastHeadApplyNode=placeHolder;return placeHolder}function applyStyle(style,target,contextNode){target=target||document.head;let after=contextNode&&contextNode.nextSibling||target.firstChild;target.insertBefore(style,after);if(!lastHeadApplyNode){lastHeadApplyNode=style}else{let position=style.compareDocumentPosition(lastHeadApplyNode);if(position===Node.DOCUMENT_POSITION_PRECEDING){lastHeadApplyNode=style}}}function findMatchingParen(text,start){let level=0;for(let i=start,l=text.length;i<l;i++){if("("===text[i]){level++}else if(")"===text[i]){if(0===--level){return i}}}return-1}function processVariableAndFallback(str,callback){let start=str.indexOf("var(");if(-1===start){return callback(str,"","","")}let end=findMatchingParen(str,start+3),inner=str.substring(start+4,end),prefix=str.substring(0,start),suffix=processVariableAndFallback(str.substring(end+1),callback),comma=inner.indexOf(",");if(-1===comma){return callback(prefix,inner.trim(),"",suffix)}let value=inner.substring(0,comma).trim(),fallback=inner.substring(comma+1).trim();return callback(prefix,value,fallback,suffix)}});